apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'

android {
    compileSdkVersion 29
    buildToolsVersion BUILDTOOLSVERSION

    defaultConfig {
        applicationId "com.sclouds.mouselive"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode Integer.valueOf(System.env.BUILD_NUMBER ?: "1")
        versionName getCustomVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        applicationVariants.all {
            variant ->
                variant.outputs.all {
                    outputFileName = "Joy-${variant.versionName}-official.apk"
                }
        }
    }

    signingConfigs {
        release
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            buildConfigField "long", "buildTime", "${buildTime()}L"
        }

        qiang {
            initWith(debug)
        }

        release {
            initWith(debug)
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFiles 'proguard-jocloud.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

static def buildTime() {
    return System.currentTimeMillis()
}

static def getGitBranch() {
    return 'git symbolic-ref --short -q HEAD'.execute().text.trim()
}

static def getCustomVersionName() {
    def versionName = '1.2.10'
    String gitBranch = getGitBranch();
    if ('master' == gitBranch) {
        return versionName
    } else if (gitBranch.endsWith('feature')) {
        return versionName + '-SNAPSHOT'
    } else {
        return versionName + "-" + gitBranch;
    }
}

File signFile = file(System.getenv('HOME') + "/.android/SCouldsign.properties")
if (signFile.canRead()) {
    Properties p = new Properties()
    p.load(new FileInputStream(signFile))
    if (p != null
            && p.containsKey('key.store')
            && p.containsKey('key.store.password')
            && p.containsKey('key.alias')
            && p.containsKey('key.alias.password')
    ) {
        println "RELEASE_BUILD: Signing..."
        android.signingConfigs.release.storeFile = file(p['key.store'])
        android.signingConfigs.release.storePassword = p['key.store.password']
        android.signingConfigs.release.keyAlias = p['key.alias']
        android.signingConfigs.release.keyPassword = p['key.alias.password']
    } else {
        println "RELEASE_BUILD: Required properties in signing.properties are missing"
        android.buildTypes.release.signingConfig = null
    }
} else {
    println "RELEASE_BUILD: signing.properties not found"
    android.buildTypes.release.signingConfig = null
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        println "assembleRelease: run collectApks collectProguard"
        task.finalizedBy collectApks
    }
}

task collectApks() {
    doLast {
        println "Copies APKs and Proguard mappingsto the target directory"
        copy {
            from 'build/outputs/apk/release'
            exclude '**/*-unaligned.apk'
            into "${project.rootDir}/target"
        }
        copy {
            from 'build/outputs/mapping'
            into "${project.rootDir}/target/proguard"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.github.bumptech.glide:glide:4.5.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.5.0'

    implementation 'cn.aigestudio.wheelpicker:WheelPicker:1.1.3'

    implementation 'com.github.warkiz.widget:indicatorseekbar:2.1.2'

    implementation project(':datasource')
    implementation project(':aliplayer')
    implementation project(':magicview')
}
